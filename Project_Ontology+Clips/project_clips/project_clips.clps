(defclass  Exams
	(is-a USER)
	(role concrete)
	(multislot  title
		(type STRING)
		(create-accessor read-write)
	)
)

(defclass  Faculty
	(is-a USER)
	(role concrete)
	(multislot  hasDepartment
		(type INSTANCE)
		(create-accessor read-write)
	)
	(multislot  _name
		(type STRING)
		(create-accessor read-write)
	)		
)

(defclass  Student
	(is-a USER)
	(role concrete)
	(multislot  _name
		(type STRING)
		(create-accessor read-write)
	)
	(multislot  finishedCourses
		(type INSTANCE)
		(create-accessor read-write)
	)
	(multislot  studentID
		(type STRING)
		(create-accessor read-write)
	)
	(multislot  isStudying
		(type INSTANCE)
		(create-accessor read-write)
	)
)

(defclass  GeneralStudent
	(is-a  Student)
	(role concrete)
	(multislot  hasProgram
		(type INSTANCE)
		(create-accessor read-write)
	)
	(multislot  belongToProgram
		(type INSTANCE)
		(create-accessor read-write)
	)
)

(defclass  SpecializedStudent
	(is-a  Student)
	(role concrete)
	(multislot  belongToDepartment
		(type INSTANCE)
		(create-accessor read-write)
	)
)

(defclass  LabRoom
	(is-a USER)
	(role concrete)
	(multislot  _name
		(type STRING)
		(create-accessor read-write))
	(multislot  locateIn
		(type INSTANCE)
		(create-accessor read-write)
	)
)

(defclass  Library
	(is-a USER)
	(role concrete)
	(multislot  _name
		(type STRING)
		(create-accessor read-write)
	)
	(multislot  locateIn
		(type INSTANCE)
		(create-accessor read-write)
	)
)

(defclass  Course
	(is-a USER)
	(role concrete)
	(multislot  isOfferedBy
		(type INSTANCE)
		(create-accessor read-write)
	)
	(multislot  isTaughtBy
		(type INSTANCE)
		(create-accessor read-write)
	)
	(multislot  _name
		(type STRING)
		(create-accessor read-write)
	)
	(multislot  consistOf
		(type INSTANCE)
		(create-accessor read-write)
	)
)

(defclass  Program
	(is-a USER)
	(role concrete)
	(multislot programName
		(type SYMBOL)
		(allowed-symbols General)
		(create-accessor read-write)
	)
)

(defclass  AcademicStaff
	(is-a USER)
	(role concrete)
	(multislot _name
		(type STRING)
		(create-accessor read-write)
	)
	(multislot  teach
		(type INSTANCE)
		(create-accessor read-write)
	)
)

(defclass  Lecturer
	(is-a  AcademicStaff)
	(role concrete)
)

(defclass  TA
	(is-a  AcademicStaff)
	(role concrete)
)

(defclass  LectureHall
	(is-a USER)
	(role concrete)
	(multislot  _name
		(type STRING)
		(create-accessor read-write)
	)
	(multislot  locateIn
		(type INSTANCE)
		(create-accessor read-write)
	)
)

(defclass  CourseWork
	(is-a USER)
	(role concrete)
	(multislot  grade
		(type FLOAT)
		(create-accessor read-write)
	)
)

(defclass  Department
	(is-a USER)
	(role concrete)
	(slot departmentName
		(type SYMBOL)
		(allowed-symbols CS IS IT AI DS)
		(create-accessor read-write)
	)
	(multislot  offer
		(type INSTANCE)
		(create-accessor read-write)
	)
	(multislot  hasTA
		(type INSTANCE)
		(create-accessor read-write)
	)
	(multislot  hasLecturer
		(type INSTANCE)
		(create-accessor read-write)
	)
)

(defclass  University
	(is-a USER)
	(role concrete)
	(multislot  contains
		(type INSTANCE)
		(create-accessor read-write)
	)
	(multislot  _name
		(type STRING)
		(create-accessor read-write)
	)
)

(defclass  Thesis
	(is-a USER)
	(role concrete)
	(multislot  title
		(type STRING)
		(create-accessor read-write)
	)
)

;_______________________________instances_____________________________________

(definstances Courses
	(course1 of  Course 
		(_name "programming1")	
	)

	(course2 of  Course 
		(_name "Data Structures")
	)

	(course3 of  Course 
		(_name "management")
	)
)

(definstances Departments 

	(department1 of  Department 
		(departmentName CS)
		(hasTA
			[TA1]
			[TA2]
		)
		(hasLecturer
			[lecturer1]
		)
		(offer
			[course1]
			[course2]
		)
	)

	(department2 of  Department 
		(departmentName IS)
		(hasLecturer
			[lecturer2]
		)
	)

	(department3 of  Department 
		(departmentName IT)
	)

	(department4 of  Department 
		(departmentName AI)
	)

	(department5 of  Department 
		(departmentName DS)
		(offer [course3])
	)
)

(definstances Faculties 
	(faculty1 of  Faculty 
		(_name "FCAI")
		(hasDepartment
			[department1]
			[department2]
			[department3]
			[department4]
			[department5]
		)		
	)
)

(definstances Lecturers

	(lecturer1 of  Lecturer 
		(_name "Dr.Ahmed")
	)

	(lecturer2 of  Lecturer 
		(_name "Dr.amin")
	)
)


(definstances Programs

	(program1 of  Program 
		(programName General)
	)
)
(definstances GeneralStudents 
	(student1 of  GeneralStudent 
		(_name "omar")
		(finishedCourses [course2])
		(hasProgram [program1])
		(isStudying [course1])
		(studentID "123")
	)
)
(definstances SpecializedStudents
	(student2 of  SpecializedStudent 
		(_name "karim")
		(belongToDepartment [department1])
		(finishedCourses [course3])
		(isStudying
			[course1]
			[course2])
		(studentID "111")
	)
)

(definstances TAs

	(TA1 of  TA 
		(_name "ahmed")
	)

	(TA2 of  TA 
		(_name "mohamed")
	)

	(TA3 of  TA 
		(_name "ali mohamed")
	)
)
(definstances Universities
	(university1 of University
		(_name "CU")
		(contains [faculty1])
	)
)


;__________________________________Queries___________________________

(deftemplate Query1Fact
   (multislot query1Slot)
)
(deftemplate Query2Fact
   (multislot query2Slot)
)
(deftemplate Query3Fact
   (multislot query3Slot)
)
(deftemplate Query4Fact
   (multislot query4Slot)
)
(deftemplate Query5Fact
   (multislot query5Slot)
)

;1.	Get all TAs belonging to a department.

(defrule getAllTAs
 (department_name ?var)
 (object (is-a Department) (name ?department) (departmentName ?var) (hasTA $? ?TA $?))
 (object (is-a TA) (name ?TA) (_name ?name))
=> 
  (assert (Query1Fact(query1Slot ?name)))
  (printout t ?name crlf)
)
;2.	Get the courses a student is currently studying.

(defrule getAllStudentCourses
 (student_name ?var)
 (object (is-a Student) (name ?student) (_name ?var)(isStudying $? ?course $?))
 (object (is-a Course) (name ?course) (_name ?name))
=>
 (assert (Query2Fact(query2Slot ?name)))
 (printout t ?name crlf)
)

;3.	Get all the courses offered by a certain faculty.

(defrule getAllFacultyCourses
	(faculty_name ?var)
	(object (is-a Faculty) (name ?faculty) (_name ?var) (hasDepartment $? ?department $?))
	(object (is-a Department) (name ?department) (offer $? ?course $?))
	(object (is-a Course) (name ?course) (_name ?name))
=>
  (assert (Query3Fact(query3Slot ?name)))

	(printout t ?name crlf)
)

;4.	Get Lecturers of a faculty.

(defrule getAllLecturers
	(faculty_name2 ?var)
	(object (is-a Faculty) (name ?faculty) (_name ?var) (hasDepartment $? ?department $?))
	(object (is-a Department) (name ?department) (hasLecturer $? ?lecturer $?))
	(object (is-a Lecturer) (name ?lecturer) (_name ?name))
=>
    (assert (Query4Fact(query4Slot ?name)))
	(printout t ?name crlf)
)
;5.	Get all faculties of a university.
(defrule getAllFaculties
	(university_name ?var)
	(object (is-a University) (name ?university) (_name ?var) (contains $? ?faculty $?))
	(object (is-a Faculty) (name ?faculty) (_name ?name))
=>
    (assert (Query5Fact(query5Slot ?name)))
	(printout t ?name crlf)
)

;(assert (department_name CS))
;(assert (student_name "karim"))
;(assert (faculty_name "FCAI"))
;(assert (faculty_name2 "FCAI"))
;(assert (university_name "CU"))
